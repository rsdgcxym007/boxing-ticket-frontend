name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.2)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
            arch: arm64
          - os: windows-latest
            platform: win
            arch: x64

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Cache Nuxt build output
      uses: actions/cache@v4
      with:
        path: .nuxt
        key: ${{ runner.os }}-nuxt-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuxt-

    - name: Build Nuxt app
      run: npm run generate

    - name: Build Electron app (macOS)
      if: matrix.platform == 'mac'
      run: npx electron-builder --mac --arm64 --publish=never
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        CSC_LINK: ''
        CSC_KEY_PASSWORD: ''
        APPLE_ID: ''
        APPLE_ID_PASS: ''
        APPLE_TEAM_ID: ''

    - name: Build Electron app (Windows)
      if: matrix.platform == 'win'
      run: npx electron-builder --win --x64 --publish=never

    - name: List dist-electron directory
      if: always()
      shell: bash
      run: |
        echo "Listing dist-electron contents..."
        ls -la dist-electron/ || echo "dist-electron directory not found"
        find . -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.msi" -o -name "*.zip" | head -10

    - name: Rename macOS update metadata
      if: matrix.platform == 'mac'
      run: |
        if [ -f "dist-electron/latest-mac.yml" ]; then
          mv dist-electron/latest-mac.yml dist-electron/latest-mac-arm64.yml
        fi

    - name: Upload macOS artifacts
      if: matrix.platform == 'mac'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist-electron/*-arm64-mac.dmg
          dist-electron/latest-mac-arm64.yml
        if-no-files-found: warn

    - name: Upload Windows artifacts
      if: matrix.platform == 'win'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist-electron/*-x64-win.exe
          dist-electron/latest.yml
        if-no-files-found: warn


  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: dist-electron/
        
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: dist-electron/
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Patong Boxing Ticket System ${{ steps.version.outputs.version }}
        files: |
          dist-electron/*-arm64-mac.dmg
          dist-electron/*-x64-win.exe
          dist-electron/latest-mac-arm64.yml
          dist-electron/latest.yml
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
