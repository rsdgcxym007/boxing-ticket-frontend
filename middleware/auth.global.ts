import { defineNuxtRouteMiddleware, navigateTo } from "nuxt/app";
import { useAuthStore } from "@/stores/auth";

/**
 * Global Authentication Middleware
 * ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á login ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö token expiration checking
 */
export default defineNuxtRouteMiddleware((to) => {
  // ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á login (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏´‡∏ô‡πâ‡∏≤ login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  const publicPages = ["/login"];

  // ‡∏•‡∏ö locale prefix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö prefix_except_default)
  let cleanPath = to.path;

  // ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ /en (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ th ‡πÄ‡∏õ‡πá‡∏ô default ‡πÑ‡∏°‡πà‡∏°‡∏µ prefix)
  if (cleanPath.startsWith("/en/")) {
    cleanPath = cleanPath.replace(/^\/en/, "") || "/";
  }

  const isPublicPage = publicPages.includes(cleanPath);

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ public ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
  if (isPublicPage) {
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡πÉ‡∏ô client side ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  if (process.client) {
    const authStore = useAuthStore();

    // initialize auth store ‡πÄ‡∏û‡∏∑‡πà‡∏≠ load user ‡∏à‡∏≤‡∏Å localStorage
    authStore.initialize();

    const token = localStorage.getItem("token");
    const tokenExpiration = localStorage.getItem("tokenExpiration");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isTokenExpired = () => {
      if (!tokenExpiration) return true;
      return Date.now() > parseInt(tokenExpiration);
    };

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡∏´‡∏£‡∏∑‡∏≠ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (!authStore.isAuthenticated || !token || isTokenExpired()) {
      console.log("‚ùå Authentication failed:", {
        hasUser: !!authStore.user,
        hasToken: !!token,
        isExpired: isTokenExpired(),
        tokenExpiration: tokenExpiration
          ? new Date(parseInt(tokenExpiration)).toISOString()
          : null,
      });

      // ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ clear ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• authentication
      if (token && isTokenExpired()) {
        console.log("üïí Token expired, clearing auth data...");
        authStore.logout();
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö prefix_except_default: th ‡πÑ‡∏°‡πà‡∏°‡∏µ prefix, en ‡∏°‡∏µ /en/
      const currentLocale = to.path.startsWith("/en/") ? "en" : "th";
      const loginPath = currentLocale === "en" ? "/en/login" : "/login";

      // redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
      return navigateTo(loginPath);
    } else {
      console.log("‚úÖ Authenticated - allowing access");
    }
  }
});
