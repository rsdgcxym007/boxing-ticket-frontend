import { defineNuxtRouteMiddleware, navigateTo } from "nuxt/app";
import { useAuthStore } from "@/stores/auth";

/**
 * Global Authentication Middleware
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ authentication ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ public
 */
export default defineNuxtRouteMiddleware((to) => {
  // ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á login
  const publicPages = [
    "/",
    "/login",
    "/register",
    "/about",
    "/contacts",
    "/ringside",
    "/components-demo",
    "/StandingTicketForm",
  ];

  // ‡∏•‡∏ö locale prefix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö prefix_except_default)
  let cleanPath = to.path;

  // ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ /en (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ th ‡πÄ‡∏õ‡πá‡∏ô default ‡πÑ‡∏°‡πà‡∏°‡∏µ prefix)
  if (cleanPath.startsWith("/en/")) {
    cleanPath = cleanPath.replace(/^\/en/, "") || "/";
  }

  const isPublicPage = publicPages.includes(cleanPath);

  console.log("üîç Auth Global Debug:", {
    originalPath: to.path,
    cleanPath,
    isPublicPage,
    publicPages,
  });

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ public ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
  if (isPublicPage) {
    console.log("‚úÖ Public page - allowing access");
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡πÉ‡∏ô client side ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  if (process.client) {
    const authStore = useAuthStore();

    // initialize auth store ‡πÄ‡∏û‡∏∑‡πà‡∏≠ load user ‡∏à‡∏≤‡∏Å localStorage
    authStore.initialize();

    const token = localStorage.getItem("token");
    console.log("üîç Auth Check:", {
      hasToken: !!token,
      hasUser: !!authStore.user,
      isAuthenticated: authStore.isAuthenticated,
      user: authStore.user,
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login
    if (!authStore.isAuthenticated) {
      console.log("‚ùå Not authenticated - redirecting to login");

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö prefix_except_default: th ‡πÑ‡∏°‡πà‡∏°‡∏µ prefix, en ‡∏°‡∏µ /en/
      const currentLocale = to.path.startsWith("/en/") ? "en" : "th";
      const loginPath = currentLocale === "en" ? "/en/login" : "/login";

      // redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
      return navigateTo(loginPath);
    } else {
      console.log("‚úÖ Authenticated - allowing access");
    }
  }
});
